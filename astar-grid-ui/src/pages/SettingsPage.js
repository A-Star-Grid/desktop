import React, { useState, useEffect } from "react";

const SettingsPage = () => {
    const [cpu, setCpu] = useState("");
    const [ram, setRam] = useState("");
    const [disk, setDisk] = useState("");
    const [vboxPath, setVBoxPath] = useState("");
    const [computationActive, setComputationActive] = useState(false);
    const [statusMessage, setStatusMessage] = useState("");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    useEffect(() => {
        fetch("http://localhost:8082/settings/current")
            .then(response => response.json())
            .then(data => {
                setCpu(data.cpuLimit);
                setRam(data.ramLimit);
                setDisk(data.diskLimit);
                setVBoxPath(data.virtualBoxPath);
                setComputationActive(data.computationActive);
            })
            .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error));
    }, []);

    const saveSettings = () => {
        const encodedPath = encodeURIComponent(vboxPath.replace(/\\/g, "/")); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—ç—à–µ–π

        Promise.all([
            fetch(`http://localhost:8082/settings/cpu?cpuCount=${cpu}`, { method: "POST" }),
            fetch(`http://localhost:8082/settings/ram?ramMB=${ram}`, { method: "POST" }),
            fetch(`http://localhost:8082/settings/disk?diskGB=${disk}`, { method: "POST" }),
            fetch(`http://localhost:8082/settings/virtualbox?path=${encodedPath}`, { method: "POST" })
        ])
            .then(() => setStatusMessage("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"))
            .catch(() => setStatusMessage("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"));
    };

    const resetSettings = () => {
        fetch("http://localhost:8082/settings/reset", { method: "POST" })
            .then(() => {
                setStatusMessage("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã");
                setCpu("");
                setRam("");
                setDisk("");
                setVBoxPath("");
                setComputationActive(false);
            })
            .catch(() => setStatusMessage("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"));
    };

    const toggleComputation = () => {
        fetch(`http://localhost:8082/settings/computation?isActive=${!computationActive}`, { method: "POST" })
            .then(() => setComputationActive(!computationActive))
            .catch(() => setStatusMessage("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"));
    };

    return (
        <div>
            <h2>‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>

            <label>CPU:</label>
            <input type="number" value={cpu} onChange={(e) => setCpu(e.target.value)} />

            <label>RAM:</label>
            <input type="number" value={ram} onChange={(e) => setRam(e.target.value)} />

            <label>Disk:</label>
            <input type="number" value={disk} onChange={(e) => setDisk(e.target.value)} />

            <label>VirtualBox Path:</label>
            <input type="text" value={vboxPath} onChange={(e) => setVBoxPath(e.target.value)} />

            <button onClick={saveSettings}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button onClick={resetSettings} style={{ marginLeft: "10px", backgroundColor: "red", color: "white" }}>
                –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </button>

            <h3>–°—Ç–∞—Ç—É—Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: {computationActive ? "üü¢ –ê–∫—Ç–∏–≤–Ω—ã" : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"}</h3>
            <button onClick={toggleComputation}>
                {computationActive ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è" : "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"}
            </button>

            {statusMessage && <p>{statusMessage}</p>}
        </div>
    );
};

export default SettingsPage;
