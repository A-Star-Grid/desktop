package org.example.services;

import org.example.clients.ServerClient;
import org.example.clients.SshClient;
import org.example.clients.VBoxClient;
import org.example.configurations.AppSettings;
import org.example.models.ComputingTask;
import org.example.models.commands.docker.DockerManager;
import org.example.models.shedule.ScheduleInterval;
import org.example.models.shedule.ScheduleTimeStamp;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

@Service
public class ComputeService {
    private final AppSettings appSettings;
    private final SubscribeService subscribeService;
    private final ServerClient serverClient;
    private final PreferencesStorage preferencesStorage;
    private final SettingService settingService;
    private final VBoxClient vBoxClient;
    private String virtualMachineName;

    private final ConcurrentHashMap<ComputingTask, Future<?>> runningTasks = new ConcurrentHashMap<>();
    private final ExecutorService executorService = Executors.newCachedThreadPool();

    public ComputeService(AppSettings appSettings,
                          SubscribeService subscribeService,
                          ServerClient serverClient,
                          PreferencesStorage preferencesStorage,
                          SettingService settingService,
                          VBoxClient vBoxClient) {
        this.appSettings = appSettings;
        this.subscribeService = subscribeService;
        this.serverClient = serverClient;
        this.preferencesStorage = preferencesStorage;
        this.settingService = settingService;
        this.vBoxClient = vBoxClient;
    }

    @Scheduled(fixedDelayString = "${compute.process.interval}")
    public void process() {
        if (!settingService.isComputationActive()) {
            cancelAllRunningTasks();
            vBoxClient.stopVirtualMachine(virtualMachineName);
            return;
        }

        virtualMachineName = "vm-" + preferencesStorage.getDeviceUUID().toString();
        if (vBoxClient.createVirtualMachineIfNotExist(virtualMachineName)) {
            vBoxClient.addSharedFolderToVirtualMachine(virtualMachineName);
        }

        var subscribes = subscribeService.getSubscribes();
        var currentTime = ScheduleTimeStamp.now();

        for (var subscribe : subscribes) {
            for (var interval : subscribe.getScheduleIntervals()) {
                if (interval.contains(currentTime)) {
                    vBoxClient.startVirtualMachineIfNotRunning(virtualMachineName);

                    var key = new ComputingTask(subscribe.getProjectId(), interval);

                    runningTasks.compute(key, (k, existingFuture) -> {
                        if (existingFuture != null && !existingFuture.isDone()) {
                            return existingFuture;
                        }

                        var newFuture = executorService.submit(() -> {
                            startComputation(subscribe.getProjectId(), interval);
                        });

                        return newFuture;
                    });
                }
            }
        }

        runningTasks.entrySet().removeIf(entry -> entry.getValue().isDone());
    }

    private void cancelAllRunningTasks() {
        runningTasks.forEach((key, future) -> {
            if (!future.isDone()) {
                future.cancel(true);
                System.out.println("‚õî –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: " + key.getProjectId());
            }
        });
        runningTasks.clear();
    }

    private void startComputation(Integer projectId, ScheduleInterval interval) {
        try {
            if (Thread.interrupted()) {
                throw new InterruptedException();
            }

            System.out.println("‚è≥ –ù–∞—á–∞—Ç–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ " + projectId);

            var taskResponse = serverClient.getCurrentTask(projectId, preferencesStorage.getDeviceUUID()).block();
            var taskUuid = taskResponse.getTaskUuid();

            var projectDirectory = Paths.get(
                    appSettings.taskArchivesDirectory,
                    "Project" + projectId
            );

            if (!Files.exists(projectDirectory)) {
                Files.createDirectories(projectDirectory);
            }

            var archivePath = projectDirectory.resolve(taskUuid + ".zip");

            if (!Files.exists(archivePath)) {
                serverClient.downloadTaskArchive(
                        taskUuid,
                        projectDirectory.toString(),
                        taskUuid + ".zip"
                ).block();
            }

            var ip = vBoxClient.getVirtualMachineIp(virtualMachineName);
            System.out.println(ip);

            runDockerComputation(projectId, ip, taskUuid.toString(), taskUuid + ".zip");

            System.out.println("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ " + projectId);
        } catch (InterruptedException e) {
            System.out.println("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞: " + projectId);
            cleanupAfterCancel(projectId);
            Thread.currentThread().interrupt(); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        } catch (IOException e) {
            System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ " + projectId);
            throw new RuntimeException(e);
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ "
                    + projectId + ": " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void runDockerComputation(Integer projectId, String virtualMachineIp, String task_uuid, String archiveName) {
        try {
            // 1. –°–æ–∑–¥–∞–µ–º SSH-–∫–ª–∏–µ–Ω—Ç–∞
            var sshClient = new SshClient(virtualMachineIp, "zemlianin", "1234");

            // 2. –°–æ–∑–¥–∞–µ–º DockerManager
            var dockerManager = new DockerManager(sshClient);

            // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
            var projectPath = "/mnt/shared/" + "Project" + projectId;
            var taskArchivePath = projectPath + "/" + archiveName;
            var resultDir = projectPath + "/output"; // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            var resultArchivePath = resultDir + ".zip"; // –ò—Ç–æ–≥–æ–≤—ã–π –∞—Ä—Ö–∏–≤
            var dockerfilePath = "/home/zemlianin/";
            var taskPath = projectPath + "/" + task_uuid;

            // 4. –†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã
            sshClient.executeCommand("unzip -o " + taskArchivePath + " -d " + taskPath);

            // 5. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            var containerName = "compute_project_" + projectId;
            dockerManager.startContainer(containerName, taskPath, dockerfilePath);

            // 6. –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            dockerManager.waitForCompletion(containerName).thenRun(() -> {
                try {
                    // 7. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ ZIP
                    sshClient.executeCommand("rm -f " + resultArchivePath); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞—Ä—Ö–∏–≤, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    sshClient.executeCommand("zip -r " + resultArchivePath + " " + resultDir);

                    // 8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                    //          serverClient.uploadComputationResult(projectId, preferencesStorage.getDeviceUUID(), resultArchivePath).block();

                    System.out.println("üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.");
                } catch (Exception e) {
                    System.err.println("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: " + e.getMessage());
                    e.printStackTrace();
                }
            });

        } catch (Exception e) {
            System.err.println("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ " + projectId + ": " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void cleanupAfterCancel(Integer projectId) {
        System.out.println("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ " + projectId);
        System.out.println("üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ " + projectId);
    }
}
